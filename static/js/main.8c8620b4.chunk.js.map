{"version":3,"sources":["components/header/header.tsx","components/grid/grid.tsx","App.tsx","index.tsx"],"names":["Header","useState","width","height","className","Math","floor","Grid","window","onmousedown","e","preventDefault","type","mouseStatus","current","onmouseup","onresize","SetHiddenWalls","solving","tiltState","newGrid","grid","hiddenNodes","innerWidth","i","j","push","rows","forEach","node","setGrid","useRef","mouseIndex","nodeDimensions","array","random","GetBlankGrid","style","marginTop","transform","gridTemplateColumns","map","_","idx","join","key","onMouseDown","index","HandleMouseDown","onMouseEnter","HandleMouseEnter","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c8620b4.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './header.css'\r\n\r\nconst Header = () => {\r\n    //window.onresize = () => {\r\n    //    setWidth(window.innerWidth)\r\n    //    setHeight(window.innerHeight)\r\n    //    console.log(window.innerHeight)\r\n    //}\r\n\r\n    const[width,setWidth] = useState(1)\r\n    const[height,setHeight] = useState(1)\r\n\r\n\r\n    return(\r\n        <div className='header'>\r\n            <h1>Height: {width}</h1>\r\n            <h1>Width: {height}</h1>\r\n            <h1>divs in bottom {Math.floor(width/101.05)}</h1>\r\n            <h1>divs in top {Math.floor(width/34.90)-1}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { useState, useRef} from 'react';\r\nimport { AStarSearch, Animation } from '../../algorithms/astar'\r\nimport './grid.css'\r\n\r\nconst rows = 18\r\nconst columns = 55\r\n//let start = Math.floor(Math.random()*rows*columns-1)\r\nconst start = 27\r\n//const finish = Math.floor(Math.random()*rows*columns-1)\r\nconst finish = rows * columns -28\r\n\r\nconst Grid = () => {\r\n  window.onmousedown = (e:MouseEvent) => {\r\n    e.preventDefault()\r\n    if(e.type === 'mousedown') mouseStatus.current = true\r\n  }\r\n  window.onmouseup = (e:MouseEvent) => {\r\n    if(e.type === 'mouseup') mouseStatus.current = false\r\n  }\r\n  window.onresize = () => {\r\n     SetHiddenWalls()\r\n  }\r\n  const SetHiddenWalls = () => {\r\n    if(!solving.current && tiltState){\r\n      const newGrid = [...grid]\r\n      var hiddenNodes = []\r\n      if(window.innerWidth < 1950){\r\n        for(let i = 0; i < rows; i++){\r\n          for(let j = 0; j <= i; j++){\r\n            hiddenNodes.push(columns * i + j)\r\n            hiddenNodes.push(columns * i - j)\r\n          }\r\n          hiddenNodes.push(rows * columns - i - 1)\r\n        }\r\n      }\r\n      if(window.innerWidth < 1900){\r\n        for(let i = 0; i < rows; i++){\r\n          for(let j = 0; j <= i; j++){\r\n            hiddenNodes.push(columns * i + j + 1)\r\n            hiddenNodes.push(columns * i - j - 1)\r\n          }\r\n          hiddenNodes.push(rows * columns - i - 2)\r\n        }\r\n      }\r\n      if(window.innerWidth < 1550){\r\n        for(let i = 0; i < rows; i++){\r\n          for(let j = 0; j <= i; j++){\r\n            hiddenNodes.push(columns * i + j + 2)\r\n            hiddenNodes.push(columns * i - j - 2)\r\n          }\r\n          hiddenNodes.push(rows * columns - i - 3)\r\n        }\r\n      }\r\n      if(window.innerWidth < 1450){\r\n        for(let i = 0; i < rows; i++){\r\n          for(let j = 0; j <= i; j++){\r\n            hiddenNodes.push(columns * i + j + 3)\r\n            hiddenNodes.push(columns * i - j - 3)\r\n          }\r\n          hiddenNodes.push(rows * columns - i - 4)\r\n        }\r\n      }\r\n      if(window.innerWidth < 1350){\r\n        for(let i = 0; i < rows; i++){\r\n          for(let j = 0; j <= i; j++){\r\n            hiddenNodes.push(columns * i + j + 4)\r\n            hiddenNodes.push(columns * i - j - 4)\r\n          }\r\n          hiddenNodes.push(rows * columns - i - 5)\r\n        }\r\n      }\r\n      \r\n\r\n      hiddenNodes.forEach(node => {\r\n        newGrid[node] = true\r\n      });\r\n      setGrid(newGrid)\r\n    }\r\n  }\r\n  const GetBlankGrid = ():boolean[] => {\r\n    let array:boolean[] = []\r\n    for(let i = 0; i < rows*columns; i++){\r\n      array[i] = (Math.random() >= 1)\r\n    }\r\n    return array\r\n  }\r\n  const HandleMouseDown = (index:number) => {\r\n    //if(!(index === start) && !(index === finish) && !solving) {\r\n    //    const newGrid = [...grid]\r\n    //    newGrid[index] = grid[index] ? false : true\r\n    //    setGrid(newGrid)\r\n    //}\r\n    SetHiddenWalls()\r\n    if(!solving.current){\r\n      mouseIndex.current = index\r\n      const newGrid = [...grid]\r\n      newGrid[index] = grid[index] ? false : true\r\n      setGrid(newGrid)\r\n    }\r\n  }\r\n  const HandleMouseEnter = (index:number) => {\r\n    //if(mouseStatus && !(index === start) && !(index === finish) && !solving){\r\n    //  const newGrid = [...grid]\r\n    //  newGrid[index] = grid[index] ? false : true\r\n    //  setGrid(newGrid)\r\n    //}\r\n    if(mouseStatus.current && index !== mouseIndex.current){\r\n      mouseIndex.current = index\r\n      const newGrid = [...grid]\r\n      newGrid[index] = grid[index] ? false : true\r\n      setGrid(newGrid)\r\n    }\r\n  }\r\n  const CleanGrid = () => {\r\n    const ne = document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>\r\n    for(let i = 0; i < ne.length; i++){\r\n      const tempClassNames = []\r\n      for(let j = 0; j < ne[i].classList.length; j++){\r\n        if(ne[i].classList[j] === 'node') tempClassNames.push('node')\r\n        if(ne[i].classList[j] === 'start') tempClassNames.push('start')\r\n        if(ne[i].classList[j] === 'finish') tempClassNames.push('finish')\r\n        if(ne[i].classList[j] === 'wall') tempClassNames.push('wall')\r\n      }\r\n      ne[i].className = tempClassNames.join(\" \")\r\n    }\r\n  }\r\n  const GetDistance = () => {\r\n    solving.current = true\r\n    CleanGrid()\r\n    const animations:Animation[] = AStarSearch(grid,columns,start,finish,false)\r\n    const ne = document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>\r\n    for(let i = 0; i < animations.length; i++){\r\n      setTimeout(() => {\r\n        ne[animations[i].index].className += animations[i].className\r\n        if(i === animations.length - 1) solving.current = false\r\n      }, i * 10)\r\n    }\r\n  }\r\n\r\n  const mouseStatus = useRef(false)\r\n  const solving = useRef(false)\r\n  const mouseIndex = useRef(-1)\r\n\r\n  const[nodeDimensions,setNodeDimensions] = useState(50)\r\n  const[grid,setGrid] = useState( () => GetBlankGrid())\r\n  const[tiltState,setTiltState] = useState(true)\r\n\r\n  grid[start] = false\r\n  grid[finish] = false\r\n  \r\n  return (\r\n    <div className=\"grid-container\">\r\n      <div className='grid' style = {{\r\n        marginTop: `${tiltState ? '-314px' : '0px'}`,\r\n        transform: `${tiltState ? 'perspective(800px) rotateX(60deg)' : ''}`,\r\n        gridTemplateColumns: `repeat(${columns},auto)`\r\n      }}>\r\n        {grid.map( (_,idx) => {\r\n          return(\r\n            <div className={[\r\n              'node',\r\n              `${idx === start ? 'start' : ''}`,\r\n              `${idx === finish ? 'finish' : ''}`,\r\n              `${grid[idx] ? 'wall' : ''}`\r\n            ].join(\" \")} \r\n            key={idx}\r\n            onMouseDown = { () => HandleMouseDown(idx)}\r\n            onMouseEnter = { () => HandleMouseEnter(idx)} \r\n            style={{\r\n              width: `${nodeDimensions}px`,\r\n              height: `${nodeDimensions}px`, \r\n            }}>\r\n            </div> \r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n//<button onClick={GetDistance}>A*</button>\r\n//<button onClick={() => tiltState ? setTiltState(false) : setTiltState(true)}>Toggle Tilt</button>\r\nexport default Grid;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/header/header';\r\nimport Grid from './components/grid/grid';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n      <Grid/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}