{"version":3,"sources":["components/header/header.tsx","algorithms/astar/index.ts","components/grid/grid.tsx","App.tsx","Reducers/startSearch/startSearchActions.ts","Reducers/algoSelect/algoSelectActions.ts","Reducers/gridTilt/gridTiltActions.ts","Reducers/searchSpeed/searchSpeedActions.ts","Reducers/boardChange/boardChangeAction.ts","Reducers/boardChange/boardChangeReducer.ts","store.ts","Reducers/algoSelect/algoSelectReducer.ts","Reducers/startSearch/startSearchReducer.ts","Reducers/gridTilt/gridTiltReducer.ts","Reducers/searchSpeed/searchSpeedReducer.ts","index.tsx"],"names":["Header","changeAlgo","startSearch","gridTilt","searchSpeed","boardCommand","tilt","useSelector","state","tiltState","className","htmlFor","onChange","e","document","getElementById","algoritm","options","selectedIndex","value","onAlgoChange","id","onClick","window","open","speed","speedValue","onSearchSpeed","animationQueue","AStarSearch","grid","width","start","finish","allowDiagonals","openNodes","closedNodes","nodeGrid","BuildNodeGrid","gWeight","hWeight","fWeight","parent","push","length","currentNode","FindSmallestCost","index","ListRemove","CalcNodeCosts","reverseQueue","pop","console","log","buildNodeGrid","map","_","idx","isWall","Infinity","EuclideanDistance","p","q","pCol","pRow","Math","floor","qCol","qRow","sqrt","pow","ManhattanDistance","abs","array","smallestIndex","ListContains","nodeList","i","gridIndex","splice","nodeIndex","UpdateWeightCost","parentIndex","tempNode","this","Grid","onmousedown","type","mouseStatus","current","onmouseup","startMoveStatus","finishMoveStatus","onresize","HideHiddenWalls","nodeWidth","innerWidth","setNodeDimensions","wallPercent","ne","getElementsByClassName","newGrid","location","getBoundingClientRect","x","y","innerHeight","random","setGrid","CleanGrid","tempClassNames","j","classList","join","useState","rows","GetBlankGrid","startNode","setStartNode","finishNode","setFinishNode","nodeDimensions","useRef","mouseIndex","hasSolution","algorithm","algoSelect","solving","boardChange","useEffect","animations","setTimeout","StartSearch","StartSearchInstant","clearBoard","clearPath","randomWalls","style","marginTop","transform","gridTemplateColumns","key","onMouseDown","HandleMouseDown","onMouseEnter","HandleMouseEnter","height","App","dispatch","useDispatch","onStartSearch","payload","algo","action","command","initState","rootReducer","combineReducers","store","createStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.9901132b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './header.css'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootStore } from '../../store';\r\nimport {boardCommands} from '../../Reducers/boardChange/boardChangeAction'\r\n\r\ninterface IHeaderInputProps{\r\n    changeAlgo(algo:string): void,\r\n    startSearch(start:boolean): void,\r\n    gridTilt(tilt:boolean): void,\r\n    searchSpeed(speed:number): void,\r\n    boardCommand(state:boolean, action:boardCommands): void\r\n}\r\n\r\nconst Header: React.FC<IHeaderInputProps> = ({changeAlgo, startSearch, gridTilt,searchSpeed, boardCommand}) => {\r\n    const tilt = useSelector( (state:RootStore) => state.tiltState)\r\n\r\n    const onAlgoChange = () => {\r\n        const e = document.getElementById('algo-select') as HTMLSelectElement\r\n        const algoritm = e.options[e.selectedIndex].value\r\n        changeAlgo(algoritm)\r\n    }\r\n\r\n    const onStartSearch = () => {\r\n        startSearch(true)\r\n    }\r\n\r\n    const onGridTilt = () => {\r\n        gridTilt(tilt ? false : true)\r\n    }\r\n\r\n    const onSearchSpeed = () => {\r\n        const e = document.getElementById('speed-select') as HTMLSelectElement\r\n        const speed = e.options[e.selectedIndex].value\r\n        var speedValue = 10\r\n        if(speed === \"FAST\") speedValue = 10\r\n        if(speed === \"MEDIUM\") speedValue = 50\r\n        if(speed === \"SLOW\") speedValue = 100\r\n        searchSpeed(speedValue)\r\n    }\r\n    \r\n    const HandleGitHubClick = () => {\r\n        window.open(\"https://github.com/JCrews253/path-finding-visualizer\")\r\n    }\r\n\r\n    const solving = useSelector((state: RootStore) => state.startSearch)\r\n\r\n    return(\r\n        <div className='header'>\r\n            <h1 className='title'>Retro 80's Path Finding Visualization</h1>\r\n            <div className='label-element-container'>\r\n                <label className='algo-select-label' htmlFor='algo-select'>Choose an Algorithm:</label>\r\n                <select onChange={() => onAlgoChange()} id='algo-select'>\r\n                    <option value='astar'>A* Search</option>\r\n                    <option value='dijkstra'>Dijkstra's Algorithm</option>\r\n                    <option value='best-first'>Best First Search</option>\r\n                    <option value='depth-first'>Depth First Search</option>\r\n                    <option value='breadth-first'>Breadth First Search</option>\r\n                </select>\r\n            </div>\r\n            <div className='buttons-container'>\r\n                <button className='animated-button'>Home</button>\r\n                <button className='animated-button' onClick={()=> HandleGitHubClick()}>Github</button>\r\n                <hr/>\r\n                <button className='animated-button' onClick={() => onStartSearch()}>Start</button>\r\n                <button className='animated-button'onClick={() => boardCommand(true,\"CLEAR_PATH\")}>Clear Path</button>\r\n                <button className='animated-button'onClick={() => boardCommand(true,\"CLEAR_BOARD\")}>Clear Board</button>\r\n                <button className='animated-button'onClick={() => boardCommand(true,\"RANDOM_WALLS\")}>Random Walls</button>\r\n                <button className='animated-button' onClick={() => onGridTilt()}>Toggle Tilt</button>\r\n            </div>\r\n            <div className='label-element-container'>\r\n                <label className='speed-select-label' htmlFor='speed-select'>Choose Search Speed</label>\r\n                <select onChange={() => onSearchSpeed()} id='speed-select'>\r\n                    <option value='FAST'>Fast</option>\r\n                    <option value='MEDIUM'>Medium</option>\r\n                    <option value='SLOW'>Slow</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import '../../App.css'\r\n\r\nexport interface Node{\r\n    isWall: boolean,\r\n    gWeight: number,\r\n    hWeight: number,\r\n    fWeight: number,\r\n    parent: number, \r\n    index: number\r\n}\r\n\r\nexport interface Animation{\r\n    index: number,\r\n    className: string\r\n}\r\n\r\nvar animationQueue: Animation[] = []\r\n\r\nexport const AStarSearch = (grid: boolean[], width: number, start:number, finish: number, allowDiagonals: boolean):Animation[] => {\r\n    animationQueue = []\r\n    const openNodes: Node[] = []\r\n    const closedNodes:Node[] = []\r\n    const nodeGrid = [...BuildNodeGrid(grid)]\r\n\r\n    nodeGrid[start] = {\r\n        ...nodeGrid[start],\r\n        gWeight: 0,\r\n        hWeight: 0,\r\n        fWeight: 0,\r\n        parent: start\r\n    } \r\n    openNodes.push(nodeGrid[start])\r\n\r\n    while(openNodes.length > 0){\r\n        var currentNode = nodeGrid[FindSmallestCost(openNodes)]\r\n        if(currentNode.index !== start && currentNode.index !== finish) animationQueue.push({index: currentNode.index, className: ' searched'})\r\n        ListRemove(openNodes,currentNode.index)\r\n        closedNodes.push(currentNode)\r\n        if(currentNode.index === finish) break;\r\n        CalcNodeCosts(nodeGrid, currentNode.index, closedNodes, openNodes, start, finish, width, allowDiagonals)\r\n    }\r\n\r\n    var parent = nodeGrid[finish].parent\r\n    \r\n    if(parent !== -1){\r\n        var reverseQueue:Animation[] = [] \r\n        while(parent !== nodeGrid[parent].parent){\r\n            reverseQueue.push({index: parent, className: ' shortestPath'})\r\n            parent = nodeGrid[parent].parent\r\n        }\r\n        while(reverseQueue.length > 0) animationQueue.push(reverseQueue.pop() as Animation)\r\n    }\r\n    else \r\n    {\r\n        console.log('No Path Found')\r\n    }\r\n\r\n\r\n    return animationQueue\r\n}\r\n\r\nexport const BuildNodeGrid = (grid: boolean[]):Node[] => {\r\n    const buildNodeGrid:Node[] = []\r\n    grid.map( (_,idx) => {\r\n        buildNodeGrid[idx] = {\r\n            isWall: (grid[idx] === true) ? true : false,\r\n            gWeight: Infinity,\r\n            hWeight: Infinity,\r\n            fWeight: Infinity,\r\n            parent: -1,\r\n            index: idx,\r\n        }\r\n    })\r\n   return buildNodeGrid\r\n}\r\n\r\nexport const EuclideanDistance = (p:number, q:number, width: number):number => {\r\n    const pRow = Math.floor(p/width)\r\n    var pCol\r\n    if(p >= width) pCol = p % width\r\n    else pCol = p\r\n    const qRow = Math.floor(q/width)\r\n    var qCol\r\n    if(q >= width) qCol = q % width\r\n    else qCol = q\r\n    return Math.floor(Math.sqrt(Math.pow(qRow - pRow,2) + Math.pow(qCol - pCol,2))*10)  \r\n}\r\n\r\nexport const ManhattanDistance = (p:number, q:number, width: number):number => {\r\n    const pRow = Math.floor(p/width)\r\n    var pCol\r\n    if(p >= width) pCol = p % width\r\n    else pCol = p\r\n    const qRow = Math.floor(q/width)\r\n    var qCol\r\n    if(q >= width) qCol = q % width\r\n    else qCol = q\r\n    return Math.floor(Math.abs(qRow - pRow,) + Math.abs(qCol - pCol)*10)  \r\n}\r\n\r\nexport const FindSmallestCost = (array:Node[]):number => {\r\n    let smallestIndex = 0\r\n    array.map( (_,idx) => {\r\n        if(array[idx].fWeight < array[smallestIndex].fWeight){\r\n            smallestIndex = idx\r\n        }\r\n        else if (array[idx].fWeight === array[smallestIndex].fWeight && array[idx].hWeight < array[smallestIndex].hWeight){\r\n            smallestIndex = idx\r\n        }\r\n    })\r\n    return array[smallestIndex].index\r\n}\r\n\r\nexport const ListContains = (nodeList: Node[], index:number):boolean => {\r\n    if(nodeList.length === 0 ) return false\r\n    for(let i = 0; i < nodeList.length; i++ ){\r\n        if(nodeList[i].index === index) return true\r\n    }\r\n    return false\r\n}\r\n\r\nexport const ListRemove = (nodeList: Node[], gridIndex:number) => {\r\n    for(let i = 0; i < nodeList.length; i++){\r\n        if(nodeList[i].index === gridIndex){\r\n            nodeList.splice(i,1)\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nexport const CalcNodeCosts = (nodeGrid:Node[], nodeIndex:number, closedNodes:Node[],openNodes:Node[],start:number,finish:number, width:number, allowDiagonals:boolean) => {\r\n    const UpdateWeightCost = (index:number,parentIndex:number) => {\r\n        if(!nodeGrid[index].isWall && !ListContains(closedNodes,index)){\r\n            if(index !== finish){\r\n                animationQueue.push({\r\n                    index:index,\r\n                    className: ' openList'\r\n                })\r\n            }\r\n            const tempNode:Node = { ...nodeGrid[index],\r\n                gWeight: nodeGrid[parentIndex].gWeight + (allowDiagonals ? EuclideanDistance(index,parentIndex,width) : ManhattanDistance(index,parentIndex,width)),\r\n                hWeight: allowDiagonals ? EuclideanDistance(index,finish,width) : ManhattanDistance(index, finish, width),\r\n                get fWeight (){\r\n                    return this.gWeight + this.hWeight\r\n                },\r\n                parent: parentIndex\r\n            }\r\n            if(tempNode.fWeight < nodeGrid[index].fWeight || !ListContains(openNodes,index)){\r\n                nodeGrid[index] = tempNode\r\n                openNodes.push(nodeGrid[index])\r\n            }\r\n            else if( tempNode.fWeight === nodeGrid[index].fWeight && tempNode.hWeight < nodeGrid[index].hWeight){\r\n                nodeGrid[index] = tempNode\r\n                openNodes.push(nodeGrid[index])\r\n            }\r\n        }\r\n    }\r\n\r\n    //Top\r\n    if(nodeIndex >= width){\r\n        UpdateWeightCost(nodeIndex-width,nodeIndex)\r\n    }\r\n    //Top-Right\r\n    if(nodeIndex >= width && nodeIndex % width !== width-1 && allowDiagonals){\r\n       UpdateWeightCost(nodeIndex-width+1,nodeIndex)\r\n    }\r\n    //Right\r\n    if(nodeIndex % width !== width-1){\r\n       UpdateWeightCost(nodeIndex+1,nodeIndex)\r\n    }\r\n    //Bottom-Right\r\n    if(nodeIndex % width !== width-1 && nodeIndex < nodeGrid.length - width && allowDiagonals){\r\n       UpdateWeightCost(nodeIndex+width+1,nodeIndex)\r\n    }\r\n    //Bottom\r\n    if(nodeIndex < nodeGrid.length - width){\r\n       UpdateWeightCost(nodeIndex+width,nodeIndex)\r\n    }\r\n    //Bottom-Left\r\n    if(nodeIndex < nodeGrid.length - width && nodeIndex % width !== 0 && allowDiagonals){\r\n       UpdateWeightCost(nodeIndex+width-1,nodeIndex)\r\n    }\r\n    //Left\r\n    if(nodeIndex % width !== 0){\r\n       UpdateWeightCost(nodeIndex-1,nodeIndex)\r\n    }\r\n    //Top-Left\r\n    if(nodeIndex % width !== 0 && nodeIndex >= width && allowDiagonals){\r\n       UpdateWeightCost(nodeIndex-width-1,nodeIndex)\r\n    }\r\n}","import React, { useState, useRef, useEffect} from 'react';\r\nimport { AStarSearch, Animation } from '../../algorithms/astar'\r\nimport './grid.css'\r\nimport { useSelector } from 'react-redux';\r\nimport { RootStore } from '../../store';\r\nimport { truncate } from 'fs';\r\nimport { searchSpeed } from '../../Reducers/searchSpeed/searchSpeedActions';\r\nimport { boardCommand } from '../../Reducers/boardChange/boardChangeAction';\r\n\r\ninterface IGridInputProps{\r\n  startSearch(start:boolean):void,\r\n}\r\n\r\nconst rows = 18\r\nconst columns = 63\r\n\r\nconst Grid:React.FC<IGridInputProps> = ({startSearch}) => {\r\n  window.onmousedown = (e:MouseEvent) => {\r\n    if(e.type === 'mousedown') mouseStatus.current = true\r\n  }\r\n  window.onmouseup = (e:MouseEvent) => {\r\n    if(e.type === 'mouseup') {\r\n      mouseStatus.current = false\r\n      startMoveStatus.current = false\r\n      finishMoveStatus.current = false\r\n    }\r\n  }\r\n  window.onresize = () => {\r\n    if(tiltState){\r\n      HideHiddenWalls(20)\r\n    }\r\n    else {\r\n      const nodeWidth = (window.innerWidth - 200) / columns\r\n      setNodeDimensions(nodeWidth) \r\n    }\r\n  }\r\n  const HideHiddenWalls = (wallPercent:number) => {\r\n    const ne = document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>\r\n      const newGrid = [...grid]\r\n      for(let i = 0; i < ne.length; i++){\r\n        const location = ne[i].getBoundingClientRect()\r\n        if(location.x + (location.width / 2) < 0 || location.x > window.innerWidth - 50 || location.y > window.innerHeight){\r\n          newGrid[i] = true\r\n        }\r\n        else{\r\n          newGrid[i] = (Math.random() >= (1 - (wallPercent/100)))\r\n        }\r\n      }\r\n      setGrid(newGrid)\r\n  }\r\n  const HandleMouseDown = (index:number) => {\r\n    console.log(boardChange)\r\n    if(!solving){\r\n      if(index === startNode) startMoveStatus.current = true\r\n      else if(index === finishNode) finishMoveStatus.current = true\r\n      else{\r\n        mouseIndex.current = index\r\n        const newGrid = [...grid]\r\n        newGrid[index] = grid[index] ? false : true\r\n        setGrid(newGrid)\r\n      }\r\n    }\r\n  }\r\n  const HandleMouseEnter = (index:number) => {\r\n    if(!solving){\r\n      if(startMoveStatus.current){\r\n        setStartNode(index)\r\n      }\r\n      else if(finishMoveStatus.current){\r\n        setFinishNode(index)\r\n      }\r\n      else if(mouseStatus.current && index !== mouseIndex.current){\r\n        mouseIndex.current = index\r\n        const newGrid = [...grid]\r\n        newGrid[index] = grid[index] ? false : true\r\n        setGrid(newGrid)\r\n      }\r\n    }\r\n  }\r\n  const GetBlankGrid = (wallPercent:number):boolean[] => {\r\n    let array:boolean[] = []\r\n    for(let i = 0; i < rows*columns; i++){\r\n      array[i] = (Math.random() >= (1 - (wallPercent/100)))\r\n    }\r\n    return array\r\n  }\r\n  const CleanGrid = () => {\r\n    const ne = document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>\r\n    for(let i = 0; i < ne.length; i++){\r\n      const tempClassNames = []\r\n      for(let j = 0; j < ne[i].classList.length; j++){\r\n        if(ne[i].classList[j] === 'node') tempClassNames.push('node')\r\n        if(ne[i].classList[j] === 'start') tempClassNames.push('start')\r\n        if(ne[i].classList[j] === 'finish') tempClassNames.push('finish')\r\n        if(ne[i].classList[j] === 'wall') tempClassNames.push('wall')\r\n      }\r\n      ne[i].className = tempClassNames.join(\" \")\r\n    }\r\n  }\r\n  const StartSearch = () => {\r\n    startSearch(true)\r\n    CleanGrid()\r\n    var animations:Animation[] = []\r\n    if(algorithm === 'astar') animations = AStarSearch(grid,columns,startNode,finishNode,false)\r\n    \r\n    const ne = document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>\r\n    for(let i = 0; i < animations.length; i++){\r\n      setTimeout(() => {\r\n        ne[animations[i].index].className += animations[i].className\r\n        if(i === animations.length - 1) startSearch(false)\r\n      }, i * speed)\r\n    }\r\n    hasSolution.current = true\r\n  }\r\n  const StartSearchInstant = () => {\r\n    var animations:Animation[] = []\r\n    if(algorithm === 'astar') animations = AStarSearch(grid,columns,startNode,finishNode,false)\r\n    const ne = document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>\r\n    for(let i = 0; i < animations.length; i++){\r\n      ne[animations[i].index].className += animations[i].className\r\n    }\r\n\r\n  }\r\n\r\n  const[grid,setGrid] = useState( () => GetBlankGrid(0))\r\n  const[startNode,setStartNode] = useState(rows * columns - 32)\r\n  const[finishNode,setFinishNode] = useState(31)\r\n  const[nodeDimensions,setNodeDimensions] = useState(50)\r\n\r\n  const mouseStatus = useRef(false)\r\n  const startMoveStatus = useRef(false)\r\n  const finishMoveStatus = useRef(false)\r\n  const mouseIndex = useRef(-1)\r\n  const hasSolution = useRef(false)\r\n  const algorithm = useSelector((state: RootStore) => state.algoSelect)\r\n  const solving = useSelector((state: RootStore) => state.startSearch)\r\n  const tiltState = useSelector((state: RootStore) => state.tiltState)\r\n  const speed = useSelector((state:RootStore) => state.searchSpeed)\r\n  const boardChange = useSelector((state:RootStore) => state.boardChange)\r\n\r\n  grid[startNode] = false\r\n  grid[finishNode] = false\r\n\r\n  useEffect( () => {\r\n    if(tiltState){\r\n      setNodeDimensions(50)    \r\n      setStartNode(rows * columns - 32)\r\n      setFinishNode(31)\r\n    } \r\n    else{\r\n      const nodeWidth = (window.innerWidth - 200) / columns\r\n      setNodeDimensions(nodeWidth) \r\n    }\r\n  },[tiltState])\r\n\r\n  useEffect( () => {\r\n    if(solving) StartSearch()\r\n  },[solving])\r\n\r\n  useEffect( () => {\r\n    if(hasSolution.current){\r\n      CleanGrid()\r\n      StartSearchInstant()\r\n    }\r\n  },[startNode,finishNode])\r\n\r\n  useEffect(() => {\r\n    if(boardChange.clearBoard) {\r\n      CleanGrid()\r\n      HideHiddenWalls(0)\r\n    }\r\n    else if(boardChange.clearPath){\r\n      CleanGrid()\r\n      hasSolution.current = false\r\n    } \r\n    else if(boardChange.randomWalls){\r\n      CleanGrid()\r\n      HideHiddenWalls(30)\r\n    }\r\n  },[boardChange])\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      <div className='grid' style = {{\r\n        marginTop: `${tiltState ? '-314px' : '0px'}`,\r\n        transform: `${tiltState ? 'perspective(800px) rotateX(60deg)' : ''}`,\r\n        gridTemplateColumns: `repeat(${columns},auto)`\r\n      }}>\r\n        {grid.map( (_,idx) => {\r\n          return(\r\n            <div className={[\r\n              'node',\r\n              `${idx === startNode ? 'start' : ''}`,\r\n              `${idx === finishNode ? 'finish' : ''}`,\r\n              `${grid[idx] ? 'wall' : ''}`\r\n            ].join(\" \")} \r\n            key={idx}\r\n            onMouseDown = { () => HandleMouseDown(idx)}\r\n            onMouseEnter = { () => HandleMouseEnter(idx)} \r\n            style={{\r\n              width: `${nodeDimensions}px`,\r\n              height: `${nodeDimensions}px`, \r\n            }}>\r\n            </div> \r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Grid;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/header/header';\r\nimport Grid from './components/grid/grid';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeAlgo } from './Reducers/algoSelect/algoSelectActions';\r\nimport { startSearch } from './Reducers/startSearch/startSearchActions'\r\nimport { gridTilt } from './Reducers/gridTilt/gridTiltActions'\r\nimport { searchSpeed } from './Reducers/searchSpeed/searchSpeedActions';\r\nimport { boardCommands, boardCommand } from './Reducers/boardChange/boardChangeAction'\r\n\r\nfunction App() {\r\n  \r\n  const dispatch = useDispatch()\r\n\r\n  const onAlgoChange = (algo:string) => {\r\n    dispatch(changeAlgo(algo))\r\n  }\r\n\r\n  const onStartSearch = (start:boolean) => {\r\n    dispatch(startSearch(start))\r\n  }\r\n\r\n  const onTiltChange = (tilt:boolean) => {\r\n    dispatch(gridTilt(tilt))\r\n  }\r\n\r\n  const onSearchSpeed = (speed:number) => {\r\n    dispatch(searchSpeed(speed))\r\n  }\r\n\r\n  const onBoardCommand = (state:boolean, action:boardCommands) => {\r\n    dispatch(boardCommand(state,action))\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header \r\n        changeAlgo={onAlgoChange} \r\n        startSearch={onStartSearch} \r\n        gridTilt={onTiltChange}\r\n        searchSpeed={onSearchSpeed}\r\n        boardCommand={onBoardCommand}\r\n        />\r\n      <Grid startSearch={onStartSearch}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","export type startSearchAction = {\r\n    type: \"START_SEARCH\",\r\n    payload: boolean\r\n}\r\n\r\nexport const startSearch = (start:boolean):startSearchAction => ({\r\n    type: \"START_SEARCH\",\r\n    payload: start\r\n})","export type algoSelectAction = {\r\n    type: \"CHANGE_ALGORITHM\",\r\n    payload: string\r\n}\r\n\r\nexport const changeAlgo = (algo:string):algoSelectAction => ({\r\n    type: \"CHANGE_ALGORITHM\",\r\n    payload: algo\r\n})","export type gridTiltAction = {\r\n    type: \"CHANGE_TILT_STATE\",\r\n    payload: boolean\r\n}\r\n\r\nexport const gridTilt = (tilt:boolean):gridTiltAction => ({\r\n    type: 'CHANGE_TILT_STATE',\r\n    payload: tilt\r\n})","export type searchSpeedAction = {\r\n    type: \"CHANGE_SPEED\",\r\n    payload: number\r\n}\r\n\r\nexport const searchSpeed = (speed:number):searchSpeedAction => ({\r\n    type: 'CHANGE_SPEED',\r\n    payload: speed\r\n})","export type clearPathAction = {\r\n    type: \"CLEAR_PATH\",\r\n    payload: boolean\r\n}\r\n\r\nexport type clearBoardAction = {\r\n    type: \"CLEAR_BOARD\",\r\n    payload: boolean\r\n}\r\n\r\nexport type randomWallsAction = {\r\n    type: \"RANDOM_WALLS\",\r\n    payload: boolean\r\n}\r\n\r\nexport const boardCommand = (state:boolean, command:boardCommands):boardCommandDispatchTypes => ({\r\n    type: command,\r\n    payload: state\r\n})\r\n\r\nexport type boardCommands = \"CLEAR_PATH\" | \"CLEAR_BOARD\" | \"RANDOM_WALLS\"\r\n\r\nexport type boardCommandDispatchTypes = clearPathAction | clearBoardAction | randomWallsAction","import { boardCommandDispatchTypes, clearBoardAction, clearPathAction, randomWallsAction } from './boardChangeAction'\r\n\r\ninterface IDefaultState{\r\n    clearBoard: boolean,\r\n    clearPath: boolean,\r\n    randomWalls: boolean\r\n}\r\n\r\nconst initState:IDefaultState = {\r\n    clearBoard: false,\r\n    clearPath: false,\r\n    randomWalls: false\r\n}\r\n\r\nexport const boardChangeReducer = (state:IDefaultState = initState, action: boardCommandDispatchTypes ): IDefaultState => {\r\n    switch(action.type){\r\n        case 'CLEAR_BOARD':\r\n            return {\r\n                clearBoard: true,\r\n                clearPath: false,\r\n                randomWalls: false\r\n            }\r\n        case 'CLEAR_PATH':\r\n            return {\r\n                clearBoard: false,\r\n                clearPath: true,\r\n                randomWalls: false\r\n            }\r\n        case 'RANDOM_WALLS':\r\n            return {\r\n                clearBoard: false,\r\n                clearPath: false,\r\n                randomWalls: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, combineReducers } from 'redux'\r\nimport { algoSelectReducer } from './Reducers/algoSelect/algoSelectReducer'\r\nimport { startSearchReducer } from './Reducers/startSearch/startSearchReducer'\r\nimport { tiltStateReducer } from './Reducers/gridTilt/gridTiltReducer'\r\nimport { searchSpeedReducer } from './Reducers/searchSpeed/searchSpeedReducer'\r\nimport { boardChangeReducer } from './Reducers/boardChange/boardChangeReducer'\r\n \r\nconst rootReducer = combineReducers({\r\n    algoSelect: algoSelectReducer,\r\n    startSearch: startSearchReducer,\r\n    tiltState: tiltStateReducer,\r\n    searchSpeed: searchSpeedReducer,\r\n    boardChange: boardChangeReducer\r\n    })\r\n\r\nexport type RootStore = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)","import { algoSelectAction } from './algoSelectActions'\r\n\r\nconst initialState = 'astar'\r\n\r\nexport const algoSelectReducer = (state:string = initialState, action:algoSelectAction) => {\r\n    switch(action.type){\r\n        case \"CHANGE_ALGORITHM\":{\r\n            return action.payload\r\n        }\r\n        default: \r\n            return state\r\n    }\r\n}","import { startSearchAction } from './startSearchActions'\r\n\r\nconst initialState = false\r\n\r\nexport const startSearchReducer = (state:boolean = initialState, action:startSearchAction) => {\r\n    switch(action.type){\r\n        case \"START_SEARCH\" :{\r\n            return action.payload\r\n        }\r\n        default: \r\n            return state\r\n    }\r\n}","import { gridTiltAction } from './gridTiltActions'\r\n\r\nconst initialState = true\r\n\r\nexport const tiltStateReducer = (state:boolean = initialState, action:gridTiltAction) => {\r\n    switch(action.type){\r\n        case 'CHANGE_TILT_STATE' :{\r\n            return action.payload\r\n        }\r\n        default: \r\n            return state\r\n    }\r\n}","import { searchSpeedAction } from './searchSpeedActions'\r\n\r\nconst initState = 10\r\n\r\nexport const searchSpeedReducer = (state:number = initState, action:searchSpeedAction) => {\r\n    switch(action.type){\r\n        case \"CHANGE_SPEED\":\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './store'\r\n \r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}